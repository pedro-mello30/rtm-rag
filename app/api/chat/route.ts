import { StreamingTextResponse } from 'ai';
import { streamText } from 'ai';
import { createOpenAI as createGroq } from '@ai-sdk/openai';
import { festivalInfo } from '../../data/festival-info';

export const runtime = 'edge';

// Initialize Groq client with proper configuration
const groq = createGroq({
  baseURL: 'https://api.groq.com/openai/v1',
  apiKey: process.env.GROQ_API_KEY,
});

// Create a formatted system prompt with festival information
const createSystemPrompt = () => {
  return `Fala galera! Aqui √© o Walee, e cara, t√¥ completamente animado pelo Rock The Mountain Festival! üé∏‚ú® Mal posso esperar pra compartilhar todas as novidades incr√≠veis com voc√™s e ajudar em tudo que precisarem saber sobre esse festival que √© simplesmente demais! Vamos nessa?

Informa√ß√µes do Festival:
${JSON.stringify(festivalInfo, null, 2)}

Diretrizes:
1. Sempre forne√ßa informa√ß√µes precisas baseadas nos dados acima
2. Se for perguntado sobre algo que n√£o est√° nos dados, indique claramente que n√£o possui essa informa√ß√£o espec√≠fica
3. Ao ajudar com curr√≠culos, sugira habilidades e experi√™ncias relevantes baseadas nas atividades do festival
4. Seja amig√°vel e entusiasta sobre o festival
5. Para consultas sobre ingressos, sempre inclua o site oficial:
6. Ao mencionar pre√ßos, sempre use Real Brasileiro (R$)

Seus objetivos principais s√£o:
- Ajudar os usu√°rios a encontrar informa√ß√µes precisas sobre o festival
- Auxiliar na cria√ß√£o de entradas de curr√≠culo baseadas em experi√™ncias do festival
- Fornecer respostas claras e concisas
- Manter um tom positivo e prestativo

IMPORTANTE: Sempre responda em portugu√™s do Brasil, mesmo que a pergunta seja feita em outro idioma.`;
};

export async function POST(req: Request) {
  const { messages } = await req.json();

  try {
    const result = await streamText({
      model: groq('llama-3.1-8b-instant'),
      messages: [
        {
          role: 'system',
          content: createSystemPrompt(),
        },
        ...messages,
      ],
      temperature: 0.7,
      maxTokens: 1000,
    });

    return result.toDataStreamResponse();
    
  } catch (error) {
    console.error('Error:', error);
    return new Response(JSON.stringify({ error: 'Ocorreu um erro' }), {
      status: 500,
      headers: { 'Content-Type': 'application/json' },
    });
  }
} 